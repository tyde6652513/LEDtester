<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="dgvDailyWatchResult.Size" type="System.Drawing.Size, System.Drawing">
    <value>763, 372</value>
  </data>
  <data name="btnLoadStdFile.Text" xml:space="preserve">
    <value>載入標準檔案</value>
  </data>
  <data name="btnLoadMsrtFile.Text" xml:space="preserve">
    <value>載入量測檔案</value>
  </data>
  <data name="btnSaveDailyReport.Text" xml:space="preserve">
    <value>輸出報表</value>
  </data>
  <data name="lblRecipeItem.Text" xml:space="preserve">
    <value>產品檔</value>
  </data>
  <data name="chkIsCheckedEverDie.Location" type="System.Drawing.Point, System.Drawing">
    <value>374, 346</value>
  </data>
  <data name="lblAutoLevel.Text" xml:space="preserve">
    <value>Auto Run 等級</value>
  </data>
  <data name="btnSettingConfirm.Size" type="System.Drawing.Size, System.Drawing">
    <value>102, 35</value>
  </data>
  <data name="tabiSetting.Text" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="tabiDailayWatch.Text" xml:space="preserve">
    <value>每日驗證</value>
  </data>
  <data name="lblMsrtDir.Text" xml:space="preserve">
    <value>量測檔資料夾</value>
  </data>
  <data name="lblCriterionPath.Text" xml:space="preserve">
    <value>條件檔路徑</value>
  </data>
  <data name="lblOpenFolderPath.Text" xml:space="preserve">
    <value>標準檔資料夾</value>
  </data>
  <data name="lblOutputPath.Text" xml:space="preserve">
    <value>輸出路徑</value>
  </data>
  <data name="lblByMechineToSaveFile.Text" xml:space="preserve">
    <value>是否BY機台名稱儲存</value>
  </data>
  <data name="lblOutputFileRule.Text" xml:space="preserve">
    <value>命名法則</value>
  </data>
  <data name="lblOutputPath2.Text" xml:space="preserve">
    <value>輸出路徑(2)</value>
  </data>
  <data name="rdAutoCheck.Size" type="System.Drawing.Size, System.Drawing">
    <value>97, 19</value>
  </data>
  <data name="rdAutoCheck.Text" xml:space="preserve">
    <value>依照Row/Col</value>
  </data>
  <data name="rdManualCheck.Size" type="System.Drawing.Size, System.Drawing">
    <value>77, 19</value>
  </data>
  <data name="rdManualCheck.Text" xml:space="preserve">
    <value>依照順序</value>
  </data>
  <data name="groupBox1.Text" xml:space="preserve">
    <value>比對資料法則</value>
  </data>
  <data name="chkFilterData.Text" xml:space="preserve">
    <value>啟動篩選</value>
  </data>
  <data name="lblTestName.Text" xml:space="preserve">
    <value>輸出檔名</value>
  </data>
  <data name="btnCalc.Text" xml:space="preserve">
    <value>計算結果</value>
  </data>
  <data name="chkIsEnableSaveFileByMechineName.Text" xml:space="preserve">
    <value>開啟</value>
  </data>
  <data name="lblBaseSetting.Text" xml:space="preserve">
    <value>基本設定</value>
  </data>
  <data name="lblOutputSetting.Text" xml:space="preserve">
    <value>輸出路徑設定</value>
  </data>
  <data name="chkIsCheckEveryDieInSpec.Text" xml:space="preserve">
    <value>增加判斷每個晶粒都在日校規格內</value>
  </data>
  <data name="tabiWaferMap.Text" xml:space="preserve">
    <value>數值比對結果</value>
  </data>
  <data name="lblLoadStdFile.Text" xml:space="preserve">
    <value>選擇標準檔案</value>
  </data>
  <data name="lblSelectTestFile.Text" xml:space="preserve">
    <value>選擇測試檔案</value>
  </data>
  <data name="tabiGraphaUIControl.Text" xml:space="preserve">
    <value>每日校正(圖形)</value>
  </data>
  <data name="tabiLog.Text" xml:space="preserve">
    <value>歷史校正紀錄</value>
  </data>
  <data name="lblFilterChips.Text" xml:space="preserve">
    <value>刪除晶粒數</value>
  </data>
  <data name="lblMinCountAccept.Text" xml:space="preserve">
    <value>比對晶粒數</value>
  </data>
  <data name="lblToleranceOutOfSpec.Text" xml:space="preserve">
    <value>規格外晶粒數</value>
  </data>
  <data name="lblTotalChips.Text" xml:space="preserve">
    <value>標準檔晶粒數</value>
  </data>
  <data name="lblTestChips.Text" xml:space="preserve">
    <value>當次測試晶粒數</value>
  </data>
  <data name="btnLoadMsrt.Text" xml:space="preserve">
    <value>開啟量測檔</value>
  </data>
  <data name="btnLoadStd.Text" xml:space="preserve">
    <value>開啟標準檔</value>
  </data>
  <data name="btnRunCalc.Text" xml:space="preserve">
    <value>計算</value>
  </data>
</root>