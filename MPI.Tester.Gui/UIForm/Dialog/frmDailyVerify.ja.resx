<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="dgvDailyWatchResult.Size" type="System.Drawing.Size, System.Drawing">
    <value>763, 372</value>
  </data>
  <data name="btnLoadStdFile.Text" xml:space="preserve">基準ファイルをロードする</data>
  <data name="btnLoadMsrtFile.Text" xml:space="preserve">測定ファイルをロードする</data>
  <data name="btnSaveDailyReport.Text" xml:space="preserve">出力フォーマット</data>
  <data name="lblRecipeItem.Text" xml:space="preserve">産品ファイル</data>
  <data name="chkIsCheckedEverDie.Location" type="System.Drawing.Point, System.Drawing">
    <value>374, 346</value>
  </data>
  <data name="lblAutoLevel.Text" xml:space="preserve">自動稼動レベル</data>
  <data name="btnSettingConfirm.Size" type="System.Drawing.Size, System.Drawing">
    <value>102, 35</value>
  </data>
  <data name="tabiSetting.Text" xml:space="preserve">設定</data>
  <data name="tabiDailayWatch.Text" xml:space="preserve">モニタリング</data>
  <data name="lblMsrtDir.Text" xml:space="preserve">測定ファイルのフォルダー</data>
  <data name="lblCriterionPath.Text" xml:space="preserve">条件ファイルパス</data>
  <data name="lblOpenFolderPath.Text" xml:space="preserve">基準ファイルのフォルダー</data>
  <data name="lblOutputPath.Text" xml:space="preserve">出力先</data>
  <data name="lblByMechineToSaveFile.Text" xml:space="preserve">マシーン名称によるセーブしますか？</data>
  <data name="lblOutputFileRule.Text" xml:space="preserve">ファイルの名付け規則</data>
  <data name="lblOutputPath2.Text" xml:space="preserve">出力先(2)</data>
  <data name="rdAutoCheck.Size" type="System.Drawing.Size, System.Drawing">
    <value>97, 19</value>
  </data>
  <data name="rdAutoCheck.Text" xml:space="preserve">座標位置による</data>
  <data name="rdManualCheck.Size" type="System.Drawing.Size, System.Drawing">
    <value>77, 19</value>
  </data>
  <data name="rdManualCheck.Text" xml:space="preserve">テスト順番による</data>
  <data name="groupBox1.Text" xml:space="preserve">データ比較の規則</data>
  <data name="chkFilterData.Text" xml:space="preserve">フィルタリングを起動する</data>
  <data name="lblTestName.Text" xml:space="preserve">出力ファイル名</data>
  <data name="btnCalc.Text" xml:space="preserve">計算結果</data>
  <data name="chkIsEnableSaveFileByMechineName.Text" xml:space="preserve">開く</data>
  <data name="lblBaseSetting.Text" xml:space="preserve">基本設定</data>
  <data name="lblOutputSetting.Text" xml:space="preserve">出力先設定</data>
  <data name="chkIsCheckEveryDieInSpec.Text" xml:space="preserve">追加判断：全チップの結果がモニタリング規格に入る</data>
  <data name="tabiWaferMap.Text" xml:space="preserve">数値比較結果</data>
  <data name="lblLoadStdFile.Text" xml:space="preserve">基準ファイルを選択する</data>
  <data name="lblSelectTestFile.Text" xml:space="preserve">測定ファイルを選択する</data>
  <data name="tabiGraphaUIControl.Text" xml:space="preserve">モニタリング(図形)</data>
  <data name="tabiLog.Text" xml:space="preserve">補正のヒストリー記録</data>
  <data name="lblFilterChips.Text" xml:space="preserve">フィルタリングで落ちたデータ個数</data>
  <data name="lblMinCountAccept.Text" xml:space="preserve">比較のデータ数</data>
  <data name="lblToleranceOutOfSpec.Text" xml:space="preserve">規格未満のデータ数</data>
  <data name="lblTotalChips.Text" xml:space="preserve">基準ファイルのデータ数</data>
  <data name="lblTestChips.Text" xml:space="preserve">当分テストしたチップ個数</data>
  <data name="btnLoadMsrt.Text" xml:space="preserve">測定ファイルを開く</data>
  <data name="btnLoadStd.Text" xml:space="preserve">基準ファイルを開く</data>
  <data name="btnRunCalc.Text" xml:space="preserve">計算</data>
</root>